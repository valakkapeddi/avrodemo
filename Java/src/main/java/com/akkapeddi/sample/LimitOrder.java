/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.akkapeddi.sample;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LimitOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7662847082744843265L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LimitOrder\",\"namespace\":\"com.akkapeddi.sample\",\"fields\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"rate\",\"type\":\"double\"},{\"name\":\"side\",\"type\":{\"type\":\"enum\",\"name\":\"Side\",\"symbols\":[\"BUY\",\"SELL\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence symbol;
  @Deprecated public int amount;
  @Deprecated public double rate;
  @Deprecated public com.akkapeddi.sample.Side side;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LimitOrder() {}

  /**
   * All-args constructor.
   * @param symbol The new value for symbol
   * @param amount The new value for amount
   * @param rate The new value for rate
   * @param side The new value for side
   */
  public LimitOrder(java.lang.CharSequence symbol, java.lang.Integer amount, java.lang.Double rate, com.akkapeddi.sample.Side side) {
    this.symbol = symbol;
    this.amount = amount;
    this.rate = rate;
    this.side = side;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return amount;
    case 2: return rate;
    case 3: return side;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = (java.lang.CharSequence)value$; break;
    case 1: amount = (java.lang.Integer)value$; break;
    case 2: rate = (java.lang.Double)value$; break;
    case 3: side = (com.akkapeddi.sample.Side)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Integer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Integer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'rate' field.
   * @return The value of the 'rate' field.
   */
  public java.lang.Double getRate() {
    return rate;
  }

  /**
   * Sets the value of the 'rate' field.
   * @param value the value to set.
   */
  public void setRate(java.lang.Double value) {
    this.rate = value;
  }

  /**
   * Gets the value of the 'side' field.
   * @return The value of the 'side' field.
   */
  public com.akkapeddi.sample.Side getSide() {
    return side;
  }

  /**
   * Sets the value of the 'side' field.
   * @param value the value to set.
   */
  public void setSide(com.akkapeddi.sample.Side value) {
    this.side = value;
  }

  /**
   * Creates a new LimitOrder RecordBuilder.
   * @return A new LimitOrder RecordBuilder
   */
  public static com.akkapeddi.sample.LimitOrder.Builder newBuilder() {
    return new com.akkapeddi.sample.LimitOrder.Builder();
  }

  /**
   * Creates a new LimitOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LimitOrder RecordBuilder
   */
  public static com.akkapeddi.sample.LimitOrder.Builder newBuilder(com.akkapeddi.sample.LimitOrder.Builder other) {
    return new com.akkapeddi.sample.LimitOrder.Builder(other);
  }

  /**
   * Creates a new LimitOrder RecordBuilder by copying an existing LimitOrder instance.
   * @param other The existing instance to copy.
   * @return A new LimitOrder RecordBuilder
   */
  public static com.akkapeddi.sample.LimitOrder.Builder newBuilder(com.akkapeddi.sample.LimitOrder other) {
    return new com.akkapeddi.sample.LimitOrder.Builder(other);
  }

  /**
   * RecordBuilder for LimitOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LimitOrder>
    implements org.apache.avro.data.RecordBuilder<LimitOrder> {

    private java.lang.CharSequence symbol;
    private int amount;
    private double rate;
    private com.akkapeddi.sample.Side side;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.akkapeddi.sample.LimitOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rate)) {
        this.rate = data().deepCopy(fields()[2].schema(), other.rate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.side)) {
        this.side = data().deepCopy(fields()[3].schema(), other.side);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LimitOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(com.akkapeddi.sample.LimitOrder other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rate)) {
        this.rate = data().deepCopy(fields()[2].schema(), other.rate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.side)) {
        this.side = data().deepCopy(fields()[3].schema(), other.side);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Integer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder setAmount(int value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rate' field.
      * @return The value.
      */
    public java.lang.Double getRate() {
      return rate;
    }

    /**
      * Sets the value of the 'rate' field.
      * @param value The value of 'rate'.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder setRate(double value) {
      validate(fields()[2], value);
      this.rate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rate' field has been set.
      * @return True if the 'rate' field has been set, false otherwise.
      */
    public boolean hasRate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rate' field.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder clearRate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'side' field.
      * @return The value.
      */
    public com.akkapeddi.sample.Side getSide() {
      return side;
    }

    /**
      * Sets the value of the 'side' field.
      * @param value The value of 'side'.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder setSide(com.akkapeddi.sample.Side value) {
      validate(fields()[3], value);
      this.side = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'side' field has been set.
      * @return True if the 'side' field has been set, false otherwise.
      */
    public boolean hasSide() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'side' field.
      * @return This builder.
      */
    public com.akkapeddi.sample.LimitOrder.Builder clearSide() {
      side = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public LimitOrder build() {
      try {
        LimitOrder record = new LimitOrder();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Integer) defaultValue(fields()[1]);
        record.rate = fieldSetFlags()[2] ? this.rate : (java.lang.Double) defaultValue(fields()[2]);
        record.side = fieldSetFlags()[3] ? this.side : (com.akkapeddi.sample.Side) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
